import React from 'react';
import { useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { View, Text, Image, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import { doc, updateDoc, arrayRemove, arrayUnion } from 'firebase/firestore';
import { db, auth } from '../../firebase-config';
import { useFocusEffect, useRoute } from '@react-navigation/native';
import { getDoc } from 'firebase/firestore';

export default function BookDetailScreen({ route, navigation }) {
  const { book } = route.params;
  const [isRead, setIsRead] = useState(false);
  const [isDeleted, setIsDeleted] = useState(false);
  const [currentBook, setCurrentBook] = useState(book);
  const [loading, setLoading] = useState(true);

  const thumbnail = book.thumbnail;

  const { title, authors, totalPages = 0, pagesRead = 0, lastNote = null, status } = currentBook;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
  const getButtonStyle = (status) => {
    const isActive = currentBook.status === status;
    return {
      backgroundColor: isActive ? 
        (status === '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' ? '#B5EAD7' : 
         status === '–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å' ? '#FFD166' : '#A5D8FF') : '#F0F0F0',
      opacity: isActive ? 1 : 0.7,
      paddingVertical: 10,
      paddingHorizontal: 15,
      borderRadius: 8,
      marginHorizontal: 5,
      minWidth: 120,
      alignItems: 'center'
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏
  const handleChangeStatus = async (newStatus) => {
    if (currentBook.status === newStatus) return;
    
    setLoading(true);
    try {
      const user = auth.currentUser;
      if (!user) return;

      const userRef = doc(db, 'users', user.uid);
      
      // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É —Å–æ —Å—Ç–∞—Ä—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
      await updateDoc(userRef, {
        books: arrayRemove(currentBook)
      });
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
      const updatedBook = {
        ...currentBook,
        status: newStatus,
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pagesRead –¥–ª—è "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
        pagesRead: newStatus === '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' ? currentBook.totalPages : currentBook.pagesRead
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É
      await updateDoc(userRef, {
        books: arrayUnion(updatedBook)
      });

      setCurrentBook(updatedBook);
      Alert.alert('–£—Å–ø–µ—Ö', `–ö–Ω–∏–≥–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ "${newStatus}"`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateNote = () => {
    navigation.navigate('NoteEditorScreen', { 
      book: {
        id: book.id,
        title: book.title,
        authors: book.authors,
        thumbnail: book.thumbnail,
        pagesRead: book.pagesRead,
        totalPages: book.totalPages,
        status: book.status,
        notes: book.notes || [],
        quotes: book.quotes || [],
        lastNote: book.lastNote,
        lastQuote: book.lastQuote
      }
    });
  };

  const handleMarkAsRead = async () => {
    const pagesNumber = parseInt(pagesTodayInput);
  if (isNaN(pagesNumber) || pagesNumber <= 0) {
    Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü');
    return;
  }

  try {
    const user = auth.currentUser;
    const userRef = doc(db, 'users', user.uid);
    const userSnap = await getDoc(userRef);
    const allBooks = userSnap.data().books || [];

    const updatedPages = Math.min(pagesRead + pagesNumber, totalPages);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É
    const updatedBook = {
      ...book,
      pagesRead: updatedPages,
      readDates: [...(book.readDates || []), new Date().toISOString().split('T')[0]],
      readPages: [
        ...(book.readPages || []),
        {
          date: new Date().toISOString().split('T')[0],
          pages: pagesNumber
        }
      ]
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–∏–≥
    const updatedBooks = allBooks.map(b => b.id === book.id ? updatedBook : b);
    
    await updateDoc(userRef, { books: updatedBooks });

    setPagesRead(updatedPages);
    setPagesTodayInput('');
    setIsMarkModalVisible(false);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–æ–π
    navigation.navigate('BookDetailScreen', { 
      book: updatedBook,
      refresh: true 
    });
    
  } catch (error) {
    console.error(error);
    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
  }
  };

  const handleDeleteBook = async () => {
    try {
      const user = auth.currentUser;
      if (!user) return;

      const userRef = doc(db, 'users', user.uid);
      
      // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await updateDoc(userRef, {
        books: arrayRemove(book)
      });

      setIsDeleted(true);
      Alert.alert('–£—Å–ø–µ—Ö', '–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
      navigation.goBack(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É');
    }
  };

  useEffect(() => {
    if (currentBook.status === '–ü–ª–∞–Ω–∏—Ä—É—é' && currentBook.pagesRead > 0) {
      const updateBookStatus = async () => {
        try {
          const user = auth.currentUser;
          const userRef = doc(db, 'users', user.uid);
          
          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏
          await updateDoc(userRef, {
            books: arrayRemove(currentBook)
          });
          
          // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
          const updatedBook = {
            ...currentBook,
            status: '–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å'
          };
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É
          await updateDoc(userRef, {
            books: arrayUnion(updatedBook)
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setCurrentBook(updatedBook);
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏:', error);
        }
      };
      
      updateBookStatus();
    }
  }, [currentBook.pagesRead]);

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const loadState = async () => {
      const savedRead = await AsyncStorage.getItem(`book_${book.id}_read`);
      const savedDeleted = await AsyncStorage.getItem(`book_${book.id}_deleted`);
      if (savedRead) setIsRead(JSON.parse(savedRead));
      if (savedDeleted) setIsDeleted(JSON.parse(savedDeleted));
    };
    loadState();
  }, []);

  const formatDayMonth = (dateString) => {
    try {
      const [day, month, year] = dateString.split(/[.,\s]+/);
      return `${day}.${month}`;
    } catch {
      return dateString;
    }
  };

  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    AsyncStorage.setItem(`book_${book.id}_read`, JSON.stringify(isRead));
  }, [isRead]);

  useEffect(() => {
    AsyncStorage.setItem(`book_${book.id}_deleted`, JSON.stringify(isDeleted));
  }, [isDeleted]);

  useFocusEffect(
    React.useCallback(() => {
      const fetchUpdatedBook = async () => {
        const user = auth.currentUser;
        const userRef = doc(db, 'users', user.uid);
        const userSnap = await getDoc(userRef);
        const books = userSnap.data().books || [];
        const updated = books.find(b => b.id === book.id);
        if (updated) {
        setCurrentBook(updated); // üí• –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä–∏—Å—É—é—Ç—Å—è
        }
      };
      fetchUpdatedBook();
    }, [])
  );

  return (
    <View style={styles.container}>
      <View style={{flexDirection: 'row', zIndex: 1}}>
        <TouchableOpacity 
          style={{marginTop: 77, marginLeft: 25}} 
          onPress={() => navigation.navigate('HomeScreen')}>
          <Image source={require('../../assets/Vector.png')} />
        </TouchableOpacity>
        <Text style={[styles.mainTitle, {marginLeft: 120, marginTop: 70}]}>–û –∫–Ω–∏–≥–µ</Text>
      </View>
      
      <View style={{position: 'absolute', zIndex: 0}}>
        <Image
          source={require('../../assets/Ellipse.png')}
          style={{width: 400, height: 530}}
        />
      </View>

      <Text style={[styles.sectionTitle, {marginLeft: 60, marginTop: 20, fontWeight: 10}]}>
        {typeof authors === 'string' ? authors : authors.join(', ')}
      </Text>
      <Text style={[styles.sectionTitle, {marginLeft: 60, marginTop: 1, fontSize: 30}]}>
        {title}
      </Text>
      
      <View style={styles.shadowContainer}>
        {thumbnail ? (
          <Image source={{ uri: thumbnail }} style={styles.cover} resizeMode="contain" />
        ) : (
          <Image source={require('../../assets/BookDark.png')} style={styles.cover} resizeMode="contain" />
        )}
      </View>

      
      <View style={{marginLeft: 250, bottom: 285}}>
        <TouchableOpacity style={[styles.greenText, {flexDirection: 'row', marginBottom: 40}]}
        onPress={() => navigation.navigate('ProgressScreen', { book })}>
          <Image 
            source={require('../../assets/Progress.png')}
            style={styles.icon}
          />
          <Text style={[styles.itemText, {top: 1}]}>–ü—Ä–æ–≥—Ä–µ—Å—Å</Text>
        </TouchableOpacity>
        
        <TouchableOpacity style={[styles.greenText, {flexDirection: 'row', marginBottom: 40}]}
          onPress={handleCreateNote}>
          <Image 
            source={require('../../assets/List.png')}
            style={styles.icon}
          />
          <View style={{ marginLeft: 1, bottom: 5 }}>
            <Text style={styles.itemText}>–°–æ–∑–¥–∞—Ç—å</Text>
            <Text style={[styles.itemText, { bottom: 4 }]}>–∑–∞–º–µ—Ç–∫—É</Text>
          </View>
        </TouchableOpacity>
        
        <TouchableOpacity style={[styles.greenText, {flexDirection: 'row', marginBottom: 40}]}
          onPress={() => navigation.navigate('NotificationScreen', { book })}>
          <Image 
            source={require('../../assets/MessingL.png')}
            style={[styles.icon, {marginLeft: 20}]}
          />
          <View style={{ marginLeft: 1, bottom: 5 }}>
            <Text style={styles.itemText}>–ü–æ—Å—Ç–∞–≤–∏—Ç—å</Text>
            <Text style={[styles.itemText, { bottom: 4 }]}>–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</Text>
          </View>
        </TouchableOpacity>
        
        <TouchableOpacity style={[styles.greenText, {flexDirection: 'row', marginBottom: 40}]}
        onPress={() => navigation.navigate('TimerScreen', { book })}>
          <Image 
            source={require('../../assets/Time.png')}
            style={styles.icon}
          />
          <Text style={[styles.itemText, {top: 1}]}>–¢–∞–π–º–µ—Ä</Text>
        </TouchableOpacity>
      </View>
      
      <View style={{marginTop: -80}}>
        <Image 
          source={require('../../assets/Ellipse2.png')}
          style={styles.ellipse}
        />
      </View>
      
      <Text style={styles.progressText}>  
        –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {pagesRead} –∏–∑ {totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü  
      </Text>  
      <Text style={styles.noteText}>
        {lastNote ? `–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ—Ç–∫–∞: ${formatDayMonth(lastNote)}` : '–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç'}
      </Text>

      <TouchableOpacity 
        style={[
          styles.greenText, 
          { 
            marginTop: -160, 
            marginLeft: 70, 
            backgroundColor: isRead ? '#B5EAD7' : '#FFD1DC',
            opacity: isRead ? 0.7 : 1
          }
        ]}
        onPress={handleMarkAsRead}
        disabled={isRead}
      >
        <Text style={[styles.sectionTitle, {alignSelf: 'center'}]}>
          {isRead ? '–ö–Ω–∏–≥–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞' : '–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º'}
        </Text>
      </TouchableOpacity>
      
      <TouchableOpacity 
        style={[
          styles.greenText, 
          { 
            marginTop: 40, 
            marginLeft: 70, 
            backgroundColor: isDeleted ? '#B5EAD7' : '#FFD1DC',
            opacity: isDeleted ? 0.7 : 1
          }
        ]}
        onPress={handleDeleteBook}
        disabled={isDeleted}
      >
        <Text style={[styles.sectionTitle, {alignSelf: 'center'}]}>
          {isDeleted ? '–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞' : '–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É'}
        </Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: '#F8EDEB' 
  },
  mainTitle: {
    fontSize: 28,
    fontWeight: 'bold',
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333',
  },
    statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
    marginLeft: 60,
    marginTop: 5
  },
  statusText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333'
  },
  itemText: {
    fontSize: 16,
    color: '#000000',
  },
  shadowContainer: {
    paddingHorizontal: -10,
    alignSelf: 'flex-start',
    marginTop: 30,
    marginLeft: 30,
    backgroundColor: 'transparent',
    elevation: 15,
  },
  cover: { 
    width: 220, 
    height: 290, 
    marginLeft: -20 
  },
  greenText: {
    backgroundColor: '#B5EAD7',
    borderRadius: 25,
    width: 300,
    height: 40,
    padding: 6,
    paddingBottom: 10,
  },
  icon: {
    width: 30,
    height: 30,
    marginRight: 8,
    bottom: 2,
    marginLeft: 19
  },
  ellipse: {
    bottom: 140,
    marginLeft: 60,
  },
  progressText: {
    bottom: 240, 
    marginLeft: 50, 
    fontSize: 20
  },
  noteText: {
    bottom: 220, 
    marginLeft: 150, 
    fontSize: 20
  }
});